// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 003_cpe_per_project.sql

package database

import (
	"context"
)

const checkIfCPEExistByProjectName = `-- name: CheckIfCPEExistByProjectName :one
SELECT EXISTS (Select 1 from cpe_per_project
where cpe = ? and project_id = ?)
`

type CheckIfCPEExistByProjectNameParams struct {
	Cpe       string `json:"cpe"`
	ProjectID string `json:"project_id"`
}

func (q *Queries) CheckIfCPEExistByProjectName(ctx context.Context, arg CheckIfCPEExistByProjectNameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfCPEExistByProjectName, arg.Cpe, arg.ProjectID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getAllCPEByProject = `-- name: GetAllCPEByProject :many
SELECT id, cpe, created_at, updated_at, project_id FROM cpe_per_project WHERE project_id = ?
`

func (q *Queries) GetAllCPEByProject(ctx context.Context, projectID string) ([]CpePerProject, error) {
	rows, err := q.db.QueryContext(ctx, getAllCPEByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CpePerProject
	for rows.Next() {
		var i CpePerProject
		if err := rows.Scan(
			&i.ID,
			&i.Cpe,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCPEById = `-- name: GetCPEById :one
SELECT id, cpe, created_at, updated_at, project_id FROM cpe_per_project WHERE id = ?
`

func (q *Queries) GetCPEById(ctx context.Context, id string) (CpePerProject, error) {
	row := q.db.QueryRowContext(ctx, getCPEById, id)
	var i CpePerProject
	err := row.Scan(
		&i.ID,
		&i.Cpe,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const storeCPE = `-- name: StoreCPE :one
INSERT INTO cpe_per_project (cpe, created_at, updated_at, project_id)
VALUES (
    ?,
    ?,
    ?,
    ?
)
RETURNING id, cpe, created_at, updated_at, project_id
`

type StoreCPEParams struct {
	Cpe       string `json:"cpe"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	ProjectID string `json:"project_id"`
}

func (q *Queries) StoreCPE(ctx context.Context, arg StoreCPEParams) (CpePerProject, error) {
	row := q.db.QueryRowContext(ctx, storeCPE,
		arg.Cpe,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProjectID,
	)
	var i CpePerProject
	err := row.Scan(
		&i.ID,
		&i.Cpe,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}
