// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 004_cve_per_project.sql

package database

import (
	"context"
)

const getAllCVEByProject = `-- name: GetAllCVEByProject :many
SELECT id, cve, descrip, created_at, updated_at, cpe, project, solved FROM cve_per_project WHERE project = ? AND solved = false
`

func (q *Queries) GetAllCVEByProject(ctx context.Context, project string) ([]CvePerProject, error) {
	rows, err := q.db.QueryContext(ctx, getAllCVEByProject, project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CvePerProject
	for rows.Next() {
		var i CvePerProject
		if err := rows.Scan(
			&i.ID,
			&i.Cve,
			&i.Descrip,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Cpe,
			&i.Project,
			&i.Solved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectAndCPE = `-- name: GetProjectAndCPE :one
SELECT p.id as projectID, cpe.id as CPEID, cve.id as CVEID, cve.cve as CVEString FROM projects as p 
LEFT JOIN cpe_per_project cpe ON cpe.project_id = p.id
LEFT JOIN cve_per_project cve ON cve.project = p.id
WHERE p.project_name = ?
AND p.creator = ?
AND cpe.cpe = ?
AND cve.cve = ?
`

type GetProjectAndCPEParams struct {
	ProjectName string      `json:"project_name"`
	Creator     interface{} `json:"creator"`
	Cpe         string      `json:"cpe"`
	Cve         string      `json:"cve"`
}

type GetProjectAndCPERow struct {
	Projectid *string `json:"projectid"`
	Cpeid     *string `json:"cpeid"`
	Cveid     *string `json:"cveid"`
	Cvestring *string `json:"cvestring"`
}

func (q *Queries) GetProjectAndCPE(ctx context.Context, arg GetProjectAndCPEParams) (GetProjectAndCPERow, error) {
	row := q.db.QueryRowContext(ctx, getProjectAndCPE,
		arg.ProjectName,
		arg.Creator,
		arg.Cpe,
		arg.Cve,
	)
	var i GetProjectAndCPERow
	err := row.Scan(
		&i.Projectid,
		&i.Cpeid,
		&i.Cveid,
		&i.Cvestring,
	)
	return i, err
}

const storeCVE = `-- name: StoreCVE :one
INSERT INTO cve_per_project (id, cve, descrip, created_at, updated_at, cpe, project)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING id, cve, descrip, created_at, updated_at, cpe, project, solved
`

type StoreCVEParams struct {
	ID        string `json:"id"`
	Cve       string `json:"cve"`
	Descrip   string `json:"descrip"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Cpe       string `json:"cpe"`
	Project   string `json:"project"`
}

func (q *Queries) StoreCVE(ctx context.Context, arg StoreCVEParams) (CvePerProject, error) {
	row := q.db.QueryRowContext(ctx, storeCVE,
		arg.ID,
		arg.Cve,
		arg.Descrip,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Cpe,
		arg.Project,
	)
	var i CvePerProject
	err := row.Scan(
		&i.ID,
		&i.Cve,
		&i.Descrip,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cpe,
		&i.Project,
		&i.Solved,
	)
	return i, err
}

const updateCVE = `-- name: UpdateCVE :exec
UPDATE cve_per_project SET solved = ? WHERE cve = ? AND project = ? AND CPE = ?
`

type UpdateCVEParams struct {
	Solved  bool   `json:"solved"`
	Cve     string `json:"cve"`
	Project string `json:"project"`
	Cpe     string `json:"cpe"`
}

func (q *Queries) UpdateCVE(ctx context.Context, arg UpdateCVEParams) error {
	_, err := q.db.ExecContext(ctx, updateCVE,
		arg.Solved,
		arg.Cve,
		arg.Project,
		arg.Cpe,
	)
	return err
}
