// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 002_projects.sql

package database

import (
	"context"
)

const checkIfProjectExistByName = `-- name: CheckIfProjectExistByName :one
SELECT EXISTS (Select 1 from projects
where project_name = ?)
`

func (q *Queries) CheckIfProjectExistByName(ctx context.Context, projectName string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfProjectExistByName, projectName)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const checkIfProjectExistByUserIdAndName = `-- name: CheckIfProjectExistByUserIdAndName :one
SELECT EXISTS (Select 1 from projects
where creator = ? and project_name = ?)
`

type CheckIfProjectExistByUserIdAndNameParams struct {
	Creator     interface{} `json:"creator"`
	ProjectName string      `json:"project_name"`
}

func (q *Queries) CheckIfProjectExistByUserIdAndName(ctx context.Context, arg CheckIfProjectExistByUserIdAndNameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfProjectExistByUserIdAndName, arg.Creator, arg.ProjectName)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (project_name, created_at, updated_at, creator)
VALUES (
    ?,
    ?,
    ?,
    ?
)
RETURNING id, project_name, created_at, updated_at, creator
`

type CreateProjectParams struct {
	ProjectName string      `json:"project_name"`
	CreatedAt   string      `json:"created_at"`
	UpdatedAt   string      `json:"updated_at"`
	Creator     interface{} `json:"creator"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ProjectName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Creator,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Creator,
	)
	return i, err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, project_name, created_at, updated_at, creator FROM projects WHERE id = ?
`

func (q *Queries) GetProjectById(ctx context.Context, id *string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Creator,
	)
	return i, err
}

const getProjectByNameAndCreator = `-- name: GetProjectByNameAndCreator :one
SELECT id, project_name, created_at, updated_at, creator FROM projects WHERE project_name = ? and creator = ?
`

type GetProjectByNameAndCreatorParams struct {
	ProjectName string      `json:"project_name"`
	Creator     interface{} `json:"creator"`
}

func (q *Queries) GetProjectByNameAndCreator(ctx context.Context, arg GetProjectByNameAndCreatorParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByNameAndCreator, arg.ProjectName, arg.Creator)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Creator,
	)
	return i, err
}

const getProjectsByUser = `-- name: GetProjectsByUser :many
SELECT id, project_name, created_at, updated_at, creator FROM projects WHERE creator = ?
`

func (q *Queries) GetProjectsByUser(ctx context.Context, creator interface{}) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUser, creator)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Creator,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
